# -*- coding: utf-8 -*-
"""CatsnDogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZuFSIdbuZwfmnCk7YvMsV5GEmqOth_Mb
"""

from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Activation,Dropout,Dense,Flatten
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from keras.optimizers import RMSprop
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import CSVLogger



#this is to store the results in document form
Google_Colab = True
Traing_logs_file =  'Training_logs.csv'
model_summary_file = 'model_summary.txt'
test_file = 'test_file.txt'
model_file = 'model.h5'


#this is to install  livelossplot package for graph purpose
#you can change this command
if Google_Colab:
  !pip install livelossplot
  from livelossplot import PlotLossesKeras

"""**#*Fetch* the data from google drive with the following commands**"""

path  = ""
if Google_Colab:
  from google.colab import drive,files
  drive.mount('/content/drive')

path  = '/content/drive/My Drive/dogs-vs-cats/dataset'
  trainig_data_path = path+'/training_set'
  test_data_path = path+'/test_set'

Image_size = 200
Image_height,Image_width =  Image_size,Image_size
Epochs = 20
Batch_size = 32
Test_size = 30
input_shape = (Image_width,Image_height,3)

from keras.layers import Convolution2D
model  = Sequential()

#Convolutional Layer
model.add(Convolution2D(32, kernel_size = (3, 3),input_shape = input_shape,activation = 'relu'))     
model.add(MaxPooling2D(pool_size=(2, 2)))

#secondLayers of CNN
model.add(Convolution2D(32,3,3,activation = 'relu'))     
model.add(MaxPooling2D(pool_size=(2, 2)))
          
model.add(Flatten())
model.add(Dense(256, activation='relu'))

model.add(Dense(1))
model.add(Activation('sigmoid'))
    
model.compile(loss='binary_crossentropy',optimizer=RMSprop(lr=0.0001),metrics=['accuracy'])

training_data_generator = ImageDataGenerator(
          rescale = 1/255,
    shear_range = 0.1,
    zoom_range = 0.1,
    horizontal_flip = True)

test_data_generator = ImageDataGenerator(rescale = 1/255)

traing_generator = training_data_generator.flow_from_directory(
  trainig_data_path,
    target_size = (Image_width,Image_height),
    batch_size = Batch_size,
    class_mode = 'binary')
print(len(traing_generator.filenames))




test_generator = test_data_generator.flow_from_directory(
test_data_path,
target_size = (Image_width,Image_height),
batch_size=1,class_mode="binary",shuffle=False)

# from livelossplot import PlotLossesKeras
# model.fit_generator(
#     traing_generator,
#     steps_per_epoch=len(traing_generator.filenames) //Batch_size,
#     epochs=Epochs
#     ,verbose=1)
# model.save_weights(MODEL_FILE)

model.fit_generator(traing_generator,steps_per_epoch = len(traing_generator.filenames) // 32,nb_epoch = 30,
                     nb_val_samples = 200)

open(test_file,"w")
p = model.predict_generator(test_generator,20)
for index,prob in enumerate(p):
  image_path = test_data_path+"/"+test_generator.filenames[index]
  imread  = mpimg.imread(image_path)
  with open(test_file,"a") as fh:
      fh.write(str(prob[0]) + " for: " + image_path + "\n")
  plt.imshow(imread)
  if prob > 0.5:
    plt.title("%.2f" % (prob[0]*100) + "% dog")
  else:
    plt.title("%.2f" % ((1-prob[0])*100) + "% cat")
  plt.show()



